apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hello-world-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - hello-world-ingress.MY_CUSTOM_DOMAIN
    secretName: tls-secret
  rules:
  - host: hello-world-ingress.MY_CUSTOM_DOMAIN
    http:
      paths:
      - path: /hello-world-one(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: aks-helloworld-one
            port:
              number: 80
      - path: /hello-world-two(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: aks-helloworld-two
            port:
              number: 80
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: aks-helloworld-one
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hello-world-ingress-static
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /static/$2
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - hello-world-ingress.MY_CUSTOM_DOMAIN
    secretName: tls-secret
  rules:
  - host: hello-world-ingress.MY_CUSTOM_DOMAIN
    http:
      paths:
      - path: /static(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: aks-helloworld-one
            port:
              number: 80
---
- name: ingress-nginx
  chart: "ingress-nginx"
  repository: "https://kubernetes.github.io/ingress-nginx"
  version: "4.13.3"
  namespace: ingress-nginx
  createNamespace: true
  values:
    controller:
      # Configuración específica para Keycloak/Backstage
      config:
        proxy-buffer-size: "16k"
        proxy-buffers-number: "8"
        proxy-read-timeout: "300"
        proxy-send-timeout: "300"
        # Importante para Keycloak
        use-forwarded-headers: "true"
        compute-full-forwarded-for: "true"
      service:
        type: LoadBalancer
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-name: "ingress-keycloak-backstage"
          service.beta.kubernetes.io/aws-load-balancer-type: "external"
          service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
          service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
          # Preservar IP del cliente para Keycloak
          service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
        loadBalancerClass: "service.k8s.aws/nlb"
      # Recursos adecuados para el tráfico esperado
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 512Mi
      # Habilitar métricas
      metrics:
        enabled: true
      extraArgs:
        enable-ssl-passthrough: true


# Puntos clave para Keycloak y Backstage:

# 1. proxy-read-timeout: "300" - Importante para sesiones largas de Keycloak
# 2. use-forwarded-headers: "true" - Necesario para que Keycloak detecte correctamente las IPs
# 3. proxy-protocol: "*" - Preserva la IP del cliente
# 4. enable-ssl-passthrough: true - Para terminación SSL en las aplicaciones

# Esta configuración funcionará perfectamente para tu stack Keycloak + Backstage.