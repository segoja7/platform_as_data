# example/claim-eks.yaml
apiVersion: segoja7.example/v1alpha1
kind: XCLUSTER
metadata:
  name: xcluster-example-segoja7
spec:
  id: xcluster-example-segoja7
  region: us-east-1
  providerConfigName: segoja7
  tags:
    owner: "platform-team"
    environment: "development"
    project: "proyecto"
    managed-by: "crossplane"
  accountId: "476114125818"
  encryptCluster: false
  authenticationMode: "API_AND_CONFIG_MAP"
  logging:
    - "api" 
    - "audit"
    - "authenticator"
    - "controllerManager"
    - "scheduler"
  endpointPublicAccess: true
  endpointPrivateAccess: true
  publicAccessCidrs: 
    - "0.0.0.0/0"
  networkId: "xnetwork-example"
  clusterVersion: "1.33"
  nodeGroup:
    amiType: "BOTTLEROCKET_ARM_64"
    capacityType: "ON_DEMAND"
    diskSize: 20
    instanceTypes: 
     - "t4g.large"
    minSize: 1
    maxSize: 3
    desiredSize: 1
    updateConfig:
      maxUnavailablePercentage: 25
      force: true
  addons:
   - name: eks-pod-identity-agent
     version: "v1.3.8-eksbuild.2"
     resolveConflicts: "OVERWRITE"
   - name: vpc-cni
    #  version: "latest"
     resolveConflicts: "OVERWRITE"
   - name: coredns
    #  version: "latest"
     resolveConflicts: "OVERWRITE"
   - name: kube-proxy
    #  version: "latest"
     resolveConflicts: "OVERWRITE"
  helmAddonsConfig:
    - name: aws-load-balancer-controller
      chart: "aws-load-balancer-controller"
      repository: "https://aws.github.io/eks-charts"
      version: "1.13.4"
      namespace: kube-system
      createNamespace: false
      values:
        crds:
          enabled: true
        serviceAccount:
          create: true
        serviceMutatorWebhookConfig:
          failurePolicy: Ignore
        webhookConfig:
          timeoutSeconds: 30
        replicaCount: 2
        resources:
          limits:
            cpu: 200m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 200Mi
      serviceAccountName: aws-load-balancer-controller
      customPolicy: |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "iam:CreateServiceLinkedRole"
                    ],
                    "Resource": "*",
                    "Condition": {
                        "StringEquals": {
                            "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                        }
                    }
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeAccountAttributes",
                        "ec2:DescribeAddresses",
                        "ec2:DescribeAvailabilityZones",
                        "ec2:DescribeInternetGateways",
                        "ec2:DescribeVpcs",
                        "ec2:DescribeVpcPeeringConnections",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeInstances",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DescribeTags",
                        "ec2:GetCoipPoolUsage",
                        "ec2:DescribeCoipPools",
                        "ec2:GetSecurityGroupsForVpc",
                        "ec2:DescribeIpamPools",
                        "ec2:DescribeRouteTables",
                        "elasticloadbalancing:DescribeLoadBalancers",
                        "elasticloadbalancing:DescribeLoadBalancerAttributes",
                        "elasticloadbalancing:DescribeListeners",
                        "elasticloadbalancing:DescribeListenerCertificates",
                        "elasticloadbalancing:DescribeSSLPolicies",
                        "elasticloadbalancing:DescribeRules",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetGroupAttributes",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:DescribeTags",
                        "elasticloadbalancing:DescribeTrustStores",
                        "elasticloadbalancing:DescribeListenerAttributes",
                        "elasticloadbalancing:DescribeCapacityReservation"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "cognito-idp:DescribeUserPoolClient",
                        "acm:ListCertificates",
                        "acm:DescribeCertificate",
                        "iam:ListServerCertificates",
                        "iam:GetServerCertificate",
                        "waf-regional:GetWebACL",
                        "waf-regional:GetWebACLForResource",
                        "waf-regional:AssociateWebACL",
                        "waf-regional:DisassociateWebACL",
                        "wafv2:GetWebACL",
                        "wafv2:GetWebACLForResource",
                        "wafv2:AssociateWebACL",
                        "wafv2:DisassociateWebACL",
                        "shield:GetSubscriptionState",
                        "shield:DescribeProtection",
                        "shield:CreateProtection",
                        "shield:DeleteProtection"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:RevokeSecurityGroupIngress"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:CreateSecurityGroup"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:CreateTags"
                    ],
                    "Resource": "arn:aws:ec2:*:*:security-group/*",
                    "Condition": {
                        "StringEquals": {
                            "ec2:CreateAction": "CreateSecurityGroup"
                        },
                        "Null": {
                            "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                        }
                    }
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:CreateTags",
                        "ec2:DeleteTags"
                    ],
                    "Resource": "arn:aws:ec2:*:*:security-group/*",
                    "Condition": {
                        "Null": {
                            "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                            "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                        }
                    }
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:RevokeSecurityGroupIngress",
                        "ec2:DeleteSecurityGroup"
                    ],
                    "Resource": "*",
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                        }
                    }
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "elasticloadbalancing:CreateLoadBalancer",
                        "elasticloadbalancing:CreateTargetGroup"
                    ],
                    "Resource": "*",
                    "Condition": {
                        "Null": {
                            "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                        }
                    }
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "elasticloadbalancing:CreateListener",
                        "elasticloadbalancing:DeleteListener",
                        "elasticloadbalancing:CreateRule",
                        "elasticloadbalancing:DeleteRule"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "elasticloadbalancing:AddTags",
                        "elasticloadbalancing:RemoveTags"
                    ],
                    "Resource": [
                        "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                        "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                        "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                    ],
                    "Condition": {
                        "Null": {
                            "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                            "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                        }
                    }
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "elasticloadbalancing:AddTags",
                        "elasticloadbalancing:RemoveTags"
                    ],
                    "Resource": [
                        "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                        "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                        "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                        "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "elasticloadbalancing:ModifyLoadBalancerAttributes",
                        "elasticloadbalancing:SetIpAddressType",
                        "elasticloadbalancing:SetSecurityGroups",
                        "elasticloadbalancing:SetSubnets",
                        "elasticloadbalancing:DeleteLoadBalancer",
                        "elasticloadbalancing:ModifyTargetGroup",
                        "elasticloadbalancing:ModifyTargetGroupAttributes",
                        "elasticloadbalancing:DeleteTargetGroup",
                        "elasticloadbalancing:ModifyListenerAttributes",
                        "elasticloadbalancing:ModifyCapacityReservation",
                        "elasticloadbalancing:ModifyIpPools"
                    ],
                    "Resource": "*",
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                        }
                    }
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "elasticloadbalancing:AddTags"
                    ],
                    "Resource": [
                        "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                        "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                        "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                    ],
                    "Condition": {
                        "StringEquals": {
                            "elasticloadbalancing:CreateAction": [
                                "CreateTargetGroup",
                                "CreateLoadBalancer"
                            ]
                        },
                        "Null": {
                            "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                        }
                    }
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "elasticloadbalancing:RegisterTargets",
                        "elasticloadbalancing:DeregisterTargets"
                    ],
                    "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "elasticloadbalancing:SetWebAcl",
                        "elasticloadbalancing:ModifyListener",
                        "elasticloadbalancing:AddListenerCertificates",
                        "elasticloadbalancing:RemoveListenerCertificates",
                        "elasticloadbalancing:ModifyRule",
                        "elasticloadbalancing:SetRulePriorities"
                    ],
                    "Resource": "*"
                }
            ]
        }
    # - name: ingress-nginx
    #   chart: "ingress-nginx"
    #   repository: "https://kubernetes.github.io/ingress-nginx"
    #   version: "4.13.3"
    #   namespace: ingress-nginx
    #   createNamespace: true
    #   values:
    #     controller:
    #       config:
    #         hosts: false
    #       service:
    #         type: LoadBalancer
    #         annotations:
    #           service.beta.kubernetes.io/aws-load-balancer-name: "ingress-idp"
    #           service.beta.kubernetes.io/aws-load-balancer-type: "external"
    #           service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    #           service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    #         loadBalancerClass: "service.k8s.aws/nlb"
    #         targetPorts:
    #           https: https
    #       extraArgs:
    #         enable-ssl-passthrough: true
    - name: external-dns
      chart: "external-dns"
      repository: "https://kubernetes-sigs.github.io/external-dns/"
      version: "1.19.0"
      namespace: external-dns
      createNamespace: true
      values:
        replicaCount: 2
        rbac:
          create: true
        installCRDs: true
        serviceAccount:
          create: true
          name: "external-dns"
        webhook:
          port: 9443
        automountServiceAccountToken: true
        provider:
          name: "aws"
        aws:
          region: "us-east-1"
          zoneType: "public"
        interval: "1m"
        policy: "sync"
        registry: "txt"
        sources: 
          - "service"
          - "ingress"
        metrics:
          enabled: false
          serviceMonitor:
            enabled: false
        podDisruptionBudget:
          minAvailable: 1
      serviceAccountName: external-dns
      customPolicy: |
        {
        "Version": "2012-10-17",
        "Statement": [
            {
            "Effect": "Allow",
            "Action": [
                "route53:ChangeResourceRecordSets",
                "route53:ListResourceRecordSets",
                "route53:ListTagsForResources"
            ],
            "Resource": [
                "arn:aws:route53:::hostedzone/*"
            ]
            },
            {
            "Effect": "Allow",
            "Action": [
                "route53:ListHostedZones"
            ],
            "Resource": [
                "*"
            ]
            }
        ]
        }
    - name: cert-manager
      chart: "cert-manager"
      repository: "oci://quay.io/jetstack/charts"
      version: "v1.19.0"
      namespace: cert-manager
      createNamespace: true
      values:
        crds:
          enabled: true
        webhook:
          timeoutSeconds: 30
          securePort: 10251
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 128Mi
        startupapicheck:
          enabled: true
          timeout: "5m"
          backoffLimit: 6
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 100m
            memory: 128Mi
        dns01RecursiveNameservers: "8.8.8.8:53"
        dns01RecursiveNameserversOnly: true
        extraArgs:
          - --dns01-recursive-nameservers-only
          - --dns01-recursive-nameservers=8.8.8.8:53
      serviceAccountName: cert-manager
      customPolicy: |
        {
        "Version": "2012-10-17",
        "Statement": [
            {
            "Effect": "Allow",
            "Action": "route53:GetChange",
            "Resource": "arn:aws:route53:::change/*"
            },
            {
            "Effect": "Allow",
            "Action": [
                "route53:ChangeResourceRecordSets",
                "route53:ListResourceRecordSets"
            ],
            "Resource": "arn:aws:route53:::hostedzone/*",
            "Condition": {
                "ForAllValues:StringEquals": {
                "route53:ChangeResourceRecordSetsRecordTypes": ["TXT"]
                }
            }
            },
            {
            "Effect": "Allow",
            "Action": "route53:ListHostedZonesByName",
            "Resource": "*"
            }
        ]
        }